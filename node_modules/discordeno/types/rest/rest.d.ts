import { checkRateLimits } from "./checkRateLimits.js";
import { cleanupQueues } from "./cleanupQueues.js";
import { createRequestBody } from "./createRequestBody.js";
import { processQueue } from "./processQueue.js";
import { processRateLimitedPaths } from "./processRateLimitedPaths.js";
import { processRequest } from "./processRequest.js";
import { processRequestHeaders } from "./processRequestHeaders.js";
import { runMethod } from "./runMethod.js";
import { runProxyMethod } from "./runProxyMethod.js";
import { simplifyUrl } from "./simplifyUrl.js";
export declare const rest: {
    /** The bot token for this rest client. */
    token: string;
    /** The maximum amount of retries allowed */
    maxRetryCount: number;
    apiVersion: string;
    /** The secret authorization key to confirm that this was a request made by you and not a DDOS attack. */
    authorization: string;
    pathQueues: Map<string, {
        request: RestRequest;
        payload: RestPayload;
    }[]>;
    processingQueue: boolean;
    processingRateLimitedPaths: boolean;
    globallyRateLimited: boolean;
    rateLimitedPaths: Map<string, RestRateLimitedPath>;
    eventHandlers: {
        error: (...args: unknown[]) => void;
        debug: (type: string, error: string | Record<string, unknown>) => void;
        fetching(payload: RestPayload): void;
        fetched(payload: RestPayload): void;
        fetchSuccess(payload: RestPayload): void;
        fetchFailed(payload: RestPayload, error: unknown): void;
        globallyRateLimited(url: string, resetsAt: number): void;
        retriesMaxed(payload: RestPayload): void;
    };
    /** Handler function for every request. Converts to json, verified authorization & requirements and begins processing the request */
    checkRateLimits: typeof checkRateLimits;
    cleanupQueues: typeof cleanupQueues;
    processQueue: typeof processQueue;
    processRateLimitedPaths: typeof processRateLimitedPaths;
    processRequestHeaders: typeof processRequestHeaders;
    processRequest: typeof processRequest;
    createRequestBody: typeof createRequestBody;
    runMethod: typeof runMethod;
    runProxyMethod: typeof runProxyMethod;
    simplifyUrl: typeof simplifyUrl;
};
export interface RestRequest {
    url: string;
    method: string;
    respond: (payload: RestRequestResponse) => unknown;
    reject: (payload: RestRequestRejection) => unknown;
}
export interface RestRequestResponse {
    ok: boolean;
    status: number;
    body?: string;
}
export interface RestRequestRejection extends RestRequestResponse {
    error: string;
}
export interface RestPayload {
    bucketId?: string;
    body?: Record<string, unknown>;
    retryCount: number;
}
export interface RestRateLimitedPath {
    url: string;
    resetTimestamp: number;
    bucketId?: string;
}
