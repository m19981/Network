import type { Bot } from "../../../bot.js";
import { ApplicationCommandOption, ApplicationCommandTypes, Localization } from "../../../mod.js";
import { DiscordApplicationCommandOption } from "../../../types/discord.js";
/**
 * There are two kinds of Application Commands: global commands and guild commands. Global commands are available for every guild that adds your app; guild commands are specific to the guild you specify when making them. Command names are unique per application within each scope (global and guild). That means:
 *
 * - Your app **cannot** have two global commands with the same name
 * - Your app **cannot** have two guild commands within the same name **on the same guild**
 * - Your app **can** have a global and guild command with the same name
 * - Multiple apps **can** have commands with the same names
 *
 * Global commands are cached for **1 hour**. That means that new global commands will fan out slowly across all guilds, and will be guaranteed to be updated in an hour.
 * Guild commands update **instantly**. We recommend you use guild commands for quick testing, and global commands when they're ready for public use.
 */
export declare function createApplicationCommand(bot: Bot, options: CreateApplicationCommand | CreateContextApplicationCommand, guildId?: bigint): Promise<import("../../../mod.js").ApplicationCommand>;
export declare function makeOptionsForCommand(options: ApplicationCommandOption[]): DiscordApplicationCommandOption[];
/** https://discord.com/developers/docs/interactions/application-commands#endpoints-json-params */
export interface CreateApplicationCommand {
    /** 1-31 character name matching lowercase `^[\w-]{1,32}$` */
    name: string;
    /** Localization object for the `name` field. Values follow the same restrictions as `name` */
    nameLocalizations?: Localization;
    /** 1-100 character description */
    description: string;
    /** Localization object for the `description` field. Values follow the same restrictions as `description` */
    descriptionLocalizations?: Localization;
    /** The type of the command */
    type?: ApplicationCommandTypes;
    /** The parameters for the command */
    options?: ApplicationCommandOption[];
    /** Whether the command is enabled by default when the app is added to a guild. Default: true */
    defaultPermission?: boolean;
}
/** https://discord.com/developers/docs/interactions/application-commands#endpoints-json-params */
export interface CreateContextApplicationCommand {
    /** 1-31 character name matching lowercase `^[\w-]{1,32}$` */
    name: string;
    /** Localization object for the `name` field. Values follow the same restrictions as `name` */
    nameLocalizations?: Localization;
    /** The type of the command */
    type: ApplicationCommandTypes.Message | ApplicationCommandTypes.User;
}
export declare function isContextApplicationCommand(cmd: CreateContextApplicationCommand | CreateApplicationCommand): cmd is CreateContextApplicationCommand;
