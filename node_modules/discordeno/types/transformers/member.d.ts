import type { Bot } from "../bot.js";
import { DiscordMember, DiscordUser } from "../types/discord.js";
import { MemberToggles } from "./toggles/member.js";
import { UserToggles } from "./toggles/user.js";
export declare function transformUser(bot: Bot, payload: DiscordUser): {
    avatar?: bigint | undefined;
    locale?: string | undefined;
    flags?: import("../types/shared.js").UserFlags | undefined;
    email?: string | undefined;
    premiumType?: import("../types/shared.js").PremiumTypes | undefined;
    publicFlags?: import("../types/shared.js").UserFlags | undefined;
    id: bigint;
    discriminator: string;
    username: string;
    toggles: {
        add: (bits: number) => UserToggles;
        remove: (bits: number) => UserToggles;
        contains: (bits: number) => boolean;
        bot: boolean;
        system: boolean;
        verified: boolean;
        mfaEnabled: boolean;
        has: (permissions: "bot" | "system" | "verified" | "mfaEnabled" | ("bot" | "system" | "verified" | "mfaEnabled")[]) => boolean;
        list: () => Record<"bot" | "system" | "verified" | "mfaEnabled", boolean>;
        bitfield: number;
    };
};
export declare function transformMember(bot: Bot, payload: DiscordMember, guildId: bigint, userId: bigint): {
    permissions?: bigint | undefined;
    avatar?: bigint | undefined;
    nick?: string | undefined;
    premiumSince?: number | undefined;
    communicationDisabledUntil?: number | undefined;
    id: bigint;
    guildId: bigint;
    roles: bigint[];
    toggles: {
        add: (bits: number) => MemberToggles;
        remove: (bits: number) => MemberToggles;
        contains: (bits: number) => boolean;
        pending: boolean;
        mute: boolean;
        deaf: boolean;
        has: (permissions: "pending" | "mute" | "deaf" | ("pending" | "mute" | "deaf")[]) => boolean;
        list: () => Record<"pending" | "mute" | "deaf", boolean>;
        bitfield: number;
    };
    joinedAt: number;
};
export interface Member extends ReturnType<typeof transformMember> {
}
export interface User extends ReturnType<typeof transformUser> {
}
