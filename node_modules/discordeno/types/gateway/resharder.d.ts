import { GetGatewayBot } from "../transformers/gatewayBot.js";
import { GatewayManager } from "./gatewayManager.js";
/** The handler to automatically reshard when necessary. */
export declare function resharder(oldGateway: GatewayManager, results: GetGatewayBot): Promise<GatewayManager>;
/** Handler that by default will check all new shards are online in the new gateway. The handler can be overridden if you have multiple servers to communicate through redis pubsub or whatever you prefer. */
export declare function resharderIsPending(gateway: GatewayManager, oldGateway: GatewayManager): Promise<boolean>;
/** Handler that by default closes all shards in the old gateway. Can be overridden if you have multiple servers and you want to communicate through redis pubsub or whatever you prefer. */
export declare function resharderCloseOldShards(oldGateway: GatewayManager): Promise<void>;
/** Handler that by default will check to see if resharding should occur. Can be overridden if you have multiple servers and you want to communicate through redis pubsub or whatever you prefer. */
export declare function startReshardingChecks(gateway: GatewayManager): Promise<GatewayManager | undefined>;
/** Handler that by default will save the new shard id for each guild this becomes ready in new gateway. This can be overridden to save the shard ids in a redis cache layer or whatever you prefer. These ids will be used later to update all guilds. */
export declare function markNewGuildShardId(guildIds: bigint[], shardId: number): Promise<void>;
/** Handler that by default does not do anything since by default the library will not cache. */
export declare function reshardingEditGuildShardIds(): Promise<void>;
