import { Collection } from "../util/collection.js";
import { safeRequestsPerShard } from "./safeRequestsPerShard.js";
import { closeWS } from "./closeWs.js";
import { createShard } from "./createShard.js";
import { handleOnMessage } from "./handleOnMessage.js";
import { heartbeat } from "./heartbeat.js";
import { identify } from "./identify.js";
import { processGatewayQueue } from "./processGatewayQueue.js";
import { markNewGuildShardId, resharder, resharderCloseOldShards, resharderIsPending, reshardingEditGuildShardIds, startReshardingChecks, } from "./resharder.js";
import { resume } from "./resume.js";
import { sendShardMessage } from "./sendShardMessage.js";
import { prepareBuckets, spawnShards } from "./spawnShards.js";
import { stopGateway } from "./stopGateway.js";
import { tellWorkerToIdentify } from "./tellWorkerToIdentify.js";
import { GatewayIntents } from "../types/shared.js";
import { calculateMaxShards } from "./calculateMaxShards.js";
/** Create a new Gateway Manager.
 *
 * @param options: Customize every bit of the manager. If something is not
 * provided, it will fallback to a default which should be suitable for most
 * bots.
 */
export function createGatewayManager(options) {
    return {
        queueResetInterval: 60000,
        maxRequestsPerInterval: 120,
        cache: {
            guildIds: new Set(),
            loadingGuildIds: new Set(),
            editedMessages: new Collection(),
        },
        secretKey: options.secretKey ?? "",
        url: options.url ?? "",
        reshard: options.reshard ?? true,
        reshardPercentage: options.reshardPercentage ?? 80,
        spawnShardDelay: options.spawnShardDelay ?? 5000,
        maxShards: options.maxShards ?? options.shardsRecommended ?? 0,
        useOptimalLargeBotSharding: options.useOptimalLargeBotSharding ?? true,
        shardsPerWorker: options.shardsPerWorker ?? 25,
        maxWorkers: options.maxWorkers ?? 4,
        firstShardId: options.firstShardId ?? 0,
        lastShardId: options.lastShardId ?? options.maxShards ?? options.shardsRecommended ?? 1,
        token: options.token ?? "",
        compress: options.compress ?? false,
        $os: options.$os ?? "linux",
        $browser: options.$browser ?? "Discordeno",
        $device: options.$device ?? "Discordeno",
        intents: (Array.isArray(options.intents)
            ? options.intents.reduce((bits, next) => (bits |= GatewayIntents[next]), 0)
            : options.intents) ?? 0,
        shard: options.shard ?? [0, options.shardsRecommended ?? 1],
        presence: options.presence,
        urlWSS: options.urlWSS ?? "wss://gateway.discord.gg/?v=9&encoding=json",
        shardsRecommended: options.shardsRecommended ?? 1,
        sessionStartLimitTotal: options.sessionStartLimitTotal ?? 1000,
        sessionStartLimitRemaining: options.sessionStartLimitRemaining ?? 1000,
        sessionStartLimitResetAfter: options.sessionStartLimitResetAfter ?? 0,
        maxConcurrency: options.maxConcurrency ?? 1,
        shards: options.shards ?? new Collection(),
        loadingShards: options.loadingShards ?? new Collection(),
        buckets: new Collection(),
        utf8decoder: new TextDecoder(),
        prepareBuckets: options.prepareBuckets ?? prepareBuckets,
        spawnShards: options.spawnShards ?? spawnShards,
        createShard: options.createShard ?? createShard,
        identify: options.identify ?? identify,
        heartbeat: options.heartbeat ?? heartbeat,
        tellWorkerToIdentify,
        debug: options.debug || function () { },
        resharding: {
            resharder: options.resharding?.resharder ?? resharder,
            isPending: options.resharding?.isPending ?? resharderIsPending,
            closeOldShards: options.resharding?.closeOldShards ?? resharderCloseOldShards,
            check: options.resharding?.check ?? startReshardingChecks,
            markNewGuildShardId: options.resharding?.markNewGuildShardId ?? markNewGuildShardId,
            editGuildShardIds: options.resharding?.editGuildShardIds ?? reshardingEditGuildShardIds,
        },
        handleOnMessage: options.handleOnMessage ?? handleOnMessage,
        processGatewayQueue: options.processGatewayQueue ?? processGatewayQueue,
        closeWS: options.closeWS ?? closeWS,
        stopGateway: options.stopGateway ?? stopGateway,
        sendShardMessage: options.sendShardMessage ?? sendShardMessage,
        resume: options.resume ?? resume,
        safeRequestsPerShard: options.safeRequestsPerShard ?? safeRequestsPerShard,
        handleDiscordPayload: options.handleDiscordPayload,
        calculateMaxShards: options.calculateMaxShards ?? calculateMaxShards,
    };
}
