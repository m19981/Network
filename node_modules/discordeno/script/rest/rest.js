"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rest = void 0;
// deno-lint-ignore-file no-unused-vars
const checkRateLimits_js_1 = require("./checkRateLimits.js");
const cleanupQueues_js_1 = require("./cleanupQueues.js");
const createRequestBody_js_1 = require("./createRequestBody.js");
const processQueue_js_1 = require("./processQueue.js");
const processRateLimitedPaths_js_1 = require("./processRateLimitedPaths.js");
const processRequest_js_1 = require("./processRequest.js");
const processRequestHeaders_js_1 = require("./processRequestHeaders.js");
const runMethod_js_1 = require("./runMethod.js");
const runProxyMethod_js_1 = require("./runProxyMethod.js");
const simplifyUrl_js_1 = require("./simplifyUrl.js");
exports.rest = {
    /** The bot token for this rest client. */
    token: "",
    /** The maximum amount of retries allowed */
    maxRetryCount: 10,
    apiVersion: "9",
    /** The secret authorization key to confirm that this was a request made by you and not a DDOS attack. */
    authorization: "discordeno_best_lib_ever",
    pathQueues: new Map(),
    processingQueue: false,
    processingRateLimitedPaths: false,
    globallyRateLimited: false,
    rateLimitedPaths: new Map(),
    eventHandlers: {
        // BY DEFAULT WE WILL LOG ALL ERRORS TO CONSOLE. USER CAN CHOOSE TO OVERRIDE
        error: function (...args) { },
        // PLACEHOLDERS TO ALLOW USERS TO CUSTOMIZE
        debug: function (type, error) { },
        fetching(payload) { },
        fetched(payload) { },
        fetchSuccess(payload) { },
        fetchFailed(payload, error) { },
        globallyRateLimited(url, resetsAt) { },
        retriesMaxed(payload) { },
    },
    /** Handler function for every request. Converts to json, verified authorization & requirements and begins processing the request */
    checkRateLimits: checkRateLimits_js_1.checkRateLimits,
    cleanupQueues: cleanupQueues_js_1.cleanupQueues,
    processQueue: processQueue_js_1.processQueue,
    processRateLimitedPaths: processRateLimitedPaths_js_1.processRateLimitedPaths,
    processRequestHeaders: processRequestHeaders_js_1.processRequestHeaders,
    processRequest: processRequest_js_1.processRequest,
    createRequestBody: createRequestBody_js_1.createRequestBody,
    runMethod: runMethod_js_1.runMethod,
    runProxyMethod: runProxyMethod_js_1.runProxyMethod,
    simplifyUrl: simplifyUrl_js_1.simplifyUrl,
};
