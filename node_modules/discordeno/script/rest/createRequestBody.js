"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestBody = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
const constants_js_1 = require("../util/constants.js");
/** Creates the request body and headers that are necessary to send a request. Will handle different types of methods and everything necessary for discord. */
function createRequestBody(rest, queuedRequest) {
    const headers = {
        Authorization: `Bot ${rest.token}`,
        "User-Agent": constants_js_1.USER_AGENT,
    };
    // GET METHODS SHOULD NOT HAVE A BODY
    if (queuedRequest.request.method.toUpperCase() === "GET") {
        queuedRequest.payload.body = undefined;
    }
    // IF A REASON IS PROVIDED ENCODE IT IN HEADERS
    if (queuedRequest.payload.body?.reason) {
        headers["X-Audit-Log-Reason"] = encodeURIComponent(queuedRequest.payload.body.reason);
        queuedRequest.payload.body.reason = undefined;
    }
    // IF A FILE/ATTACHMENT IS PRESENT WE NEED SPECIAL HANDLING
    if (queuedRequest.payload.body?.file) {
        if (!Array.isArray(queuedRequest.payload.body.file)) {
            queuedRequest.payload.body.file = [queuedRequest.payload.body.file];
        }
        const form = new dntShim.FormData();
        for (let i = 0; i < queuedRequest.payload.body.file.length; i++) {
            form.append(`file${i}`, queuedRequest.payload.body.file[i].blob, queuedRequest.payload.body.file[i].name);
        }
        form.append("payload_json", JSON.stringify({ ...queuedRequest.payload.body, file: undefined }));
        queuedRequest.payload.body.file = form;
    }
    else if (queuedRequest.payload.body && !["GET", "DELETE"].includes(queuedRequest.request.method)) {
        headers["Content-Type"] = "application/json";
    }
    return {
        headers,
        body: (queuedRequest.payload.body?.file ?? JSON.stringify(queuedRequest.payload.body)),
        method: queuedRequest.request.method.toUpperCase(),
    };
}
exports.createRequestBody = createRequestBody;
