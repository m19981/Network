"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.heartbeat = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
const shared_js_1 = require("../types/shared.js");
const utils_js_1 = require("../util/utils.js");
async function heartbeat(gateway, shardId, interval) {
    gateway.debug("GW HEARTBEATING_STARTED", { shardId, interval });
    const shard = gateway.shards.get(shardId);
    if (!shard)
        return;
    gateway.debug("GW HEARTBEATING_DETAILS", { shardId, interval, shard });
    // The first heartbeat is special so we send it without set Interval: https://discord.com/developers/docs/topics/gateway#heartbeating
    await (0, utils_js_1.delay)(Math.floor(shard.heartbeat.interval * Math.random()));
    if (shard.ws.readyState !== dntShim.WebSocket.OPEN)
        return;
    shard.ws.send(JSON.stringify({
        op: shared_js_1.GatewayOpcodes.Heartbeat,
        d: shard.previousSequenceNumber,
    }));
    shard.heartbeat.keepAlive = true;
    shard.heartbeat.acknowledged = false;
    shard.heartbeat.lastSentAt = Date.now();
    shard.heartbeat.interval = interval;
    shard.heartbeat.intervalId = dntShim.setInterval(async () => {
        gateway.debug("GW DEBUG", `Running setInterval in heartbeat file. Shard: ${shardId}`);
        const currentShard = gateway.shards.get(shardId);
        if (!currentShard)
            return;
        gateway.debug("GW HEARTBEATING", { shardId, shard: currentShard });
        if (currentShard.ws.readyState === dntShim.WebSocket.CLOSED || !currentShard.heartbeat.keepAlive) {
            gateway.debug("GW HEARTBEATING_CLOSED", { shardId, shard: currentShard });
            // STOP THE HEARTBEAT
            return clearInterval(shard.heartbeat.intervalId);
        }
        if (!currentShard.heartbeat.acknowledged) {
            gateway.closeWS(currentShard.ws, 3066, "Did not receive an ACK in time.");
            return await gateway.identify(gateway, shardId, gateway.maxShards);
        }
        if (currentShard.ws.readyState !== dntShim.WebSocket.OPEN)
            return;
        currentShard.heartbeat.acknowledged = false;
        currentShard.heartbeat.lastSentAt = Date.now();
        currentShard.ws.send(JSON.stringify({
            op: shared_js_1.GatewayOpcodes.Heartbeat,
            d: currentShard.previousSequenceNumber,
        }));
    }, shard.heartbeat.interval);
}
exports.heartbeat = heartbeat;
