"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createShard = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
const shared_js_1 = require("../types/shared.js");
function createShard(gateway, shardId) {
    const socket = new dntShim.WebSocket(`${gateway.urlWSS}/?v=9&encoding=json`);
    socket.onerror = (errorEvent) => {
        gateway.debug("GW ERROR", { shardId, error: errorEvent });
    };
    socket.onmessage = ({ data: message }) => gateway.handleOnMessage(gateway, message, shardId);
    socket.onclose = async (event) => {
        gateway.debug("GW CLOSED", { shardId, payload: event });
        if (event.code === 3064 || event.reason === "Discordeno Testing Finished! Do Not RESUME!") {
            return;
        }
        if (event.code === 3065 || ["Resharded!", "Resuming the shard, closing old shard."].includes(event.reason)) {
            return gateway.debug("GW CLOSED_RECONNECT", { shardId, payload: event });
        }
        switch (event.code) {
            // Discordeno tests finished
            case 3061:
                return;
            case 3063: // Resharded
            case 3064: // Resuming
            case 3065: // Re-identifying
            case 3066: // Missing ACK
                // Will restart shard manually
                return gateway.debug("GW CLOSED_RECONNECT", { shardId, payload: event });
            case shared_js_1.GatewayCloseEventCodes.UnknownOpcode:
            case shared_js_1.GatewayCloseEventCodes.DecodeError:
            case shared_js_1.GatewayCloseEventCodes.AuthenticationFailed:
            case shared_js_1.GatewayCloseEventCodes.AlreadyAuthenticated:
            case shared_js_1.GatewayCloseEventCodes.InvalidShard:
            case shared_js_1.GatewayCloseEventCodes.ShardingRequired:
            case shared_js_1.GatewayCloseEventCodes.InvalidApiVersion:
            case shared_js_1.GatewayCloseEventCodes.InvalidIntents:
            case shared_js_1.GatewayCloseEventCodes.DisallowedIntents:
                throw new Error(event.reason || "Discord gave no reason! GG! You broke Discord!");
            // THESE ERRORS CAN NO BE RESUMED! THEY MUST RE-IDENTIFY!
            case shared_js_1.GatewayCloseEventCodes.NotAuthenticated:
            case shared_js_1.GatewayCloseEventCodes.InvalidSeq:
            case shared_js_1.GatewayCloseEventCodes.RateLimited:
            case shared_js_1.GatewayCloseEventCodes.SessionTimedOut:
                await gateway.identify(gateway, shardId, gateway.maxShards);
                break;
            default:
                gateway.resume(gateway, shardId);
                break;
        }
    };
    return socket;
}
exports.createShard = createShard;
