"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGatewayManager = void 0;
const collection_js_1 = require("../util/collection.js");
const safeRequestsPerShard_js_1 = require("./safeRequestsPerShard.js");
const closeWs_js_1 = require("./closeWs.js");
const createShard_js_1 = require("./createShard.js");
const handleOnMessage_js_1 = require("./handleOnMessage.js");
const heartbeat_js_1 = require("./heartbeat.js");
const identify_js_1 = require("./identify.js");
const processGatewayQueue_js_1 = require("./processGatewayQueue.js");
const resharder_js_1 = require("./resharder.js");
const resume_js_1 = require("./resume.js");
const sendShardMessage_js_1 = require("./sendShardMessage.js");
const spawnShards_js_1 = require("./spawnShards.js");
const stopGateway_js_1 = require("./stopGateway.js");
const tellWorkerToIdentify_js_1 = require("./tellWorkerToIdentify.js");
const shared_js_1 = require("../types/shared.js");
const calculateMaxShards_js_1 = require("./calculateMaxShards.js");
/** Create a new Gateway Manager.
 *
 * @param options: Customize every bit of the manager. If something is not
 * provided, it will fallback to a default which should be suitable for most
 * bots.
 */
function createGatewayManager(options) {
    return {
        queueResetInterval: 60000,
        maxRequestsPerInterval: 120,
        cache: {
            guildIds: new Set(),
            loadingGuildIds: new Set(),
            editedMessages: new collection_js_1.Collection(),
        },
        secretKey: options.secretKey ?? "",
        url: options.url ?? "",
        reshard: options.reshard ?? true,
        reshardPercentage: options.reshardPercentage ?? 80,
        spawnShardDelay: options.spawnShardDelay ?? 5000,
        maxShards: options.maxShards ?? options.shardsRecommended ?? 0,
        useOptimalLargeBotSharding: options.useOptimalLargeBotSharding ?? true,
        shardsPerWorker: options.shardsPerWorker ?? 25,
        maxWorkers: options.maxWorkers ?? 4,
        firstShardId: options.firstShardId ?? 0,
        lastShardId: options.lastShardId ?? options.maxShards ?? options.shardsRecommended ?? 1,
        token: options.token ?? "",
        compress: options.compress ?? false,
        $os: options.$os ?? "linux",
        $browser: options.$browser ?? "Discordeno",
        $device: options.$device ?? "Discordeno",
        intents: (Array.isArray(options.intents)
            ? options.intents.reduce((bits, next) => (bits |= shared_js_1.GatewayIntents[next]), 0)
            : options.intents) ?? 0,
        shard: options.shard ?? [0, options.shardsRecommended ?? 1],
        presence: options.presence,
        urlWSS: options.urlWSS ?? "wss://gateway.discord.gg/?v=9&encoding=json",
        shardsRecommended: options.shardsRecommended ?? 1,
        sessionStartLimitTotal: options.sessionStartLimitTotal ?? 1000,
        sessionStartLimitRemaining: options.sessionStartLimitRemaining ?? 1000,
        sessionStartLimitResetAfter: options.sessionStartLimitResetAfter ?? 0,
        maxConcurrency: options.maxConcurrency ?? 1,
        shards: options.shards ?? new collection_js_1.Collection(),
        loadingShards: options.loadingShards ?? new collection_js_1.Collection(),
        buckets: new collection_js_1.Collection(),
        utf8decoder: new TextDecoder(),
        prepareBuckets: options.prepareBuckets ?? spawnShards_js_1.prepareBuckets,
        spawnShards: options.spawnShards ?? spawnShards_js_1.spawnShards,
        createShard: options.createShard ?? createShard_js_1.createShard,
        identify: options.identify ?? identify_js_1.identify,
        heartbeat: options.heartbeat ?? heartbeat_js_1.heartbeat,
        tellWorkerToIdentify: tellWorkerToIdentify_js_1.tellWorkerToIdentify,
        debug: options.debug || function () { },
        resharding: {
            resharder: options.resharding?.resharder ?? resharder_js_1.resharder,
            isPending: options.resharding?.isPending ?? resharder_js_1.resharderIsPending,
            closeOldShards: options.resharding?.closeOldShards ?? resharder_js_1.resharderCloseOldShards,
            check: options.resharding?.check ?? resharder_js_1.startReshardingChecks,
            markNewGuildShardId: options.resharding?.markNewGuildShardId ?? resharder_js_1.markNewGuildShardId,
            editGuildShardIds: options.resharding?.editGuildShardIds ?? resharder_js_1.reshardingEditGuildShardIds,
        },
        handleOnMessage: options.handleOnMessage ?? handleOnMessage_js_1.handleOnMessage,
        processGatewayQueue: options.processGatewayQueue ?? processGatewayQueue_js_1.processGatewayQueue,
        closeWS: options.closeWS ?? closeWs_js_1.closeWS,
        stopGateway: options.stopGateway ?? stopGateway_js_1.stopGateway,
        sendShardMessage: options.sendShardMessage ?? sendShardMessage_js_1.sendShardMessage,
        resume: options.resume ?? resume_js_1.resume,
        safeRequestsPerShard: options.safeRequestsPerShard ?? safeRequestsPerShard_js_1.safeRequestsPerShard,
        handleDiscordPayload: options.handleDiscordPayload,
        calculateMaxShards: options.calculateMaxShards ?? calculateMaxShards_js_1.calculateMaxShards,
    };
}
exports.createGatewayManager = createGatewayManager;
