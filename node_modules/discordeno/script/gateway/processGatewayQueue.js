"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processGatewayQueue = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
const utils_js_1 = require("../util/utils.js");
async function processGatewayQueue(gateway, id) {
    const shard = gateway.shards.get(id);
    // If no items or its already processing then exit
    if (!shard?.queue.length || shard.processingQueue)
        return;
    shard.processingQueue = true;
    while (shard.queue.length) {
        if (shard.ws.readyState !== dntShim.WebSocket.OPEN) {
            shard.processingQueue = false;
            return;
        }
        const now = Date.now();
        if (now - shard.queueStartedAt >= gateway.queueResetInterval) {
            shard.queueStartedAt = now;
            shard.queueCounter = 0;
        }
        // Send a request that is next in line
        const request = shard.queue.shift();
        if (!request)
            return;
        gateway.debug("GW RAW_SEND", shard.id, request);
        shard.ws.send(JSON.stringify(request));
        // Counter is useful for preventing max requests.
        shard.queueCounter++;
        // Handle if the requests have been maxed
        if (shard.queueCounter >= shard.safeRequestsPerShard) {
            const remaining = shard.queueStartedAt + gateway.queueResetInterval - Date.now();
            if (remaining > 0) {
                gateway.debug("GW MAX REQUESTS", {
                    message: `Max gateway requests per minute reached setting timeout for ${remaining}ms`,
                    shardId: shard.id,
                });
                await (0, utils_js_1.delay)(remaining);
            }
            shard.queueCounter = 0;
            continue;
        }
    }
    shard.processingQueue = false;
}
exports.processGatewayQueue = processGatewayQueue;
